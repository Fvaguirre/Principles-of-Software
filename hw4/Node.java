package hw4;

/**
 * Node<T> class
 * 
 * represents a single node in a graph with label of type T
 * 
 * Spec Field name: the generic T name of the node
 * Spec Field distance: the distance for nodes, needed in Dijkstra
 * 
 * Abstraction Function: name represents the node unit of a graph
 * Rep Invariant: name is always not null
 */
public class Node<T>
{
	private T name;

	/**
	 * constructor for node
	 * 
	 * @param newnode name of node
	 * @effects creates new node object of with name newnode
	 * @throws exception if newnode is null
	 */
	public Node(T newnode)
	{
		if (newnode == null)
			throw new RuntimeException("node constructor can't take null argument");		
		this.name = newnode;
	}

	/**
	 * gets name of node
	 * 
	 * @return T name
	 */
	public T getName()
	{
		return this.name;
	}

	/**
	 * autogenerated equals
	 */
	@Override
	public boolean equals(Object obj)
	{
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Node<?> other = (Node<?>) obj;
		if (name == null) 
		{
			if (other.name != null)
				return false;
		}
		else if (!name.equals(other.name))
			return false;
		return true;
	}
	
	/**
	 * autogenerated hashcode
	 */
	@Override
	public int hashCode()
	{
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	/**
	 * autogenerated tostring
	 */
	@Override
	public String toString()
	{
		return "Node [name=" + name + "]";
	}

	/**
	 * check representation function
	 * 
	 * @return true if node follows rep invariant, false otherwise
	 */
	public boolean checkRep()
	{
		if (this.name == null)
			return false;
		return true;
	}
}